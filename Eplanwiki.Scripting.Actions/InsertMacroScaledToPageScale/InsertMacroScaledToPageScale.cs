/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

using Eplan.EplApi.ApplicationFramework;
using Eplan.EplApi.Base;
using Eplan.EplApi.Scripting;
using System;
using System.Diagnostics;
using System.IO;
using System.Text;
using System.Windows.Forms;
using System.Xml;

namespace Eplanwiki.Scripting.Actions
{
    /// <summary>
    /// part 1 of form to select representationtype, variant and "to page scale"
    /// DON'T TOUCH!! Generated by form-designer
    /// </summary>
    partial class RepresentationTypeAndVariantSelector
    {
        private Label labelRepType;
        private Label labelVarinat;
        private ComboBox comboBoxRepType;
        private ComboBox comboBoxVariant;
        private CheckBox checkBoxPageScale;
        private Label labelPageScale;
        private Button buttonOk;
    
        private void InitializeComponent()
        {
            this.labelRepType = new System.Windows.Forms.Label();
            this.labelVarinat = new System.Windows.Forms.Label();
            this.comboBoxRepType = new System.Windows.Forms.ComboBox();
            this.comboBoxVariant = new System.Windows.Forms.ComboBox();
            this.buttonOk = new System.Windows.Forms.Button();
            this.checkBoxPageScale = new System.Windows.Forms.CheckBox();
            this.labelPageScale = new System.Windows.Forms.Label();
            this.SuspendLayout();
            // 
            // labelRepType
            // 
            this.labelRepType.AutoSize = true;
            this.labelRepType.Location = new System.Drawing.Point(12, 9);
            this.labelRepType.Name = "labelRepType";
            this.labelRepType.Size = new System.Drawing.Size(94, 13);
            this.labelRepType.TabIndex = 0;
            this.labelRepType.Text = "Repreentationtype";
            // 
            // labelVarinat
            // 
            this.labelVarinat.AutoSize = true;
            this.labelVarinat.Location = new System.Drawing.Point(12, 48);
            this.labelVarinat.Name = "labelVarinat";
            this.labelVarinat.Size = new System.Drawing.Size(40, 13);
            this.labelVarinat.TabIndex = 1;
            this.labelVarinat.Text = "Variant";
            // 
            // comboBoxRepType
            // 
            this.comboBoxRepType.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.comboBoxRepType.FormattingEnabled = true;
            this.comboBoxRepType.Location = new System.Drawing.Point(159, 6);
            this.comboBoxRepType.Name = "comboBoxRepType";
            this.comboBoxRepType.Size = new System.Drawing.Size(270, 21);
            this.comboBoxRepType.TabIndex = 0;
            // 
            // comboBoxVariant
            // 
            this.comboBoxVariant.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.comboBoxVariant.FormattingEnabled = true;
            this.comboBoxVariant.Location = new System.Drawing.Point(159, 45);
            this.comboBoxVariant.Name = "comboBoxVariant";
            this.comboBoxVariant.Size = new System.Drawing.Size(270, 21);
            this.comboBoxVariant.TabIndex = 1;
            // 
            // buttonOk
            // 
            this.buttonOk.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
            this.buttonOk.DialogResult = System.Windows.Forms.DialogResult.OK;
            this.buttonOk.Location = new System.Drawing.Point(12, 127);
            this.buttonOk.Name = "buttonOk";
            this.buttonOk.Size = new System.Drawing.Size(417, 33);
            this.buttonOk.TabIndex = 3;
            this.buttonOk.Text = "OK";
            this.buttonOk.UseVisualStyleBackColor = true;
            this.buttonOk.Click += new System.EventHandler(this.buttonOk_Click);
            // 
            // checkBoxPageScale
            // 
            this.checkBoxPageScale.AutoSize = true;
            this.checkBoxPageScale.Location = new System.Drawing.Point(159, 93);
            this.checkBoxPageScale.Name = "checkBoxPageScale";
            this.checkBoxPageScale.Size = new System.Drawing.Size(15, 14);
            this.checkBoxPageScale.TabIndex = 2;
            this.checkBoxPageScale.UseVisualStyleBackColor = true;
            // 
            // labelPageScale
            // 
            this.labelPageScale.AutoSize = true;
            this.labelPageScale.Location = new System.Drawing.Point(12, 92);
            this.labelPageScale.Name = "labelPageScale";
            this.labelPageScale.Size = new System.Drawing.Size(75, 13);
            this.labelPageScale.TabIndex = 6;
            this.labelPageScale.Text = "To page scale";
            // 
            // RepresentationTypeAndVariantSelector
            // 
            this.AcceptButton = this.buttonOk;
            this.AutoSize = true;
            this.ClientSize = new System.Drawing.Size(438, 172);
            this.ControlBox = false;
            this.Controls.Add(this.labelPageScale);
            this.Controls.Add(this.checkBoxPageScale);
            this.Controls.Add(this.buttonOk);
            this.Controls.Add(this.comboBoxVariant);
            this.Controls.Add(this.comboBoxRepType);
            this.Controls.Add(this.labelVarinat);
            this.Controls.Add(this.labelRepType);
            this.MaximumSize = new System.Drawing.Size(454, 211);
            this.MinimumSize = new System.Drawing.Size(454, 211);
            this.Name = "RepresentationTypeAndVariantSelector";
            this.ShowIcon = false;
            this.ShowInTaskbar = false;
            this.StartPosition = System.Windows.Forms.FormStartPosition.CenterScreen;
            this.Text = "Select representationtype and variant";
            this.Load += new System.EventHandler(this.RepresentationTypeAndVariantSelector_Load);
            this.ResumeLayout(false);
            this.PerformLayout();

        }

        private void RepresentationTypeAndVariantSelector_Load(object sender, EventArgs e)
        {

        }
    }

    /// <summary>
    /// Main class of this script containing the action 
    /// </summary>
    public class InsertMacroScaledToPageScale
    {
        private uint MenuId;
        private WindowWrapper ww = null;

        [DeclareAction("InsertMacroScaledToPageScale")]        
        public void Run()
        {
            string tempPath = PathMap.SubstitutePath("$(TMP)");
            string tempMacro = tempPath + "\\temp.ema";

            OpenMacroDialog dlg = new OpenMacroDialog();

            if (dlg.Show() == DialogResult.OK)
            {
                try
                {
                    File.Copy(dlg.File, tempMacro, true);
                }
                catch (IOException IOex)
                {
                    MessageBox.Show(ww, IOex.Message, "Uuups, I'm so sorry!");                    
                }
                RepresentationTypeAndVariantSelector selector = new RepresentationTypeAndVariantSelector(tempMacro);
                selector.ShowDialog(ww);                
                this.ReplaceXmlAttributeValue(tempMacro, "EplanPxfRoot", "Custompagescaleused", selector.ToPageScale);
                this.InsertMacro(tempMacro, selector.Representationtype, selector.Variant);
            }
        }

        /// <summary>
        /// Calls the Eplan Interaction for placing macros
        /// </summary>
        /// <param name="macroFilePath">Absolute filepath with extension</param>
        /// <param name="repType">Representationtype of macro as enum or int</param>
        /// <param name="variant">Variant of macro as enum or int</param>
        private void InsertMacro(string macroFilePath, RepresentationType repType, Variant variant)
        {
            ActionCallingContext XGedStartInteractionActionContext = new ActionCallingContext();
            XGedStartInteractionActionContext.AddParameter("Name", "XMIaInsertMacro");
            XGedStartInteractionActionContext.AddParameter("filename", macroFilePath);
            XGedStartInteractionActionContext.AddParameter("variant", Convert.ToInt16(variant).ToString());
            XGedStartInteractionActionContext.AddParameter("RepresentationType", Convert.ToInt16(repType).ToString());
            new CommandLineInterpreter().Execute("XGedStartInteractionAction", XGedStartInteractionActionContext);
        }

        /// <summary>
        /// Replaces value from given attribute of each element found with given name
        /// </summary>
        /// <param name="xmlFileName">Absolute filepath with extension</param>
        /// <param name="nodeName">Name of the node (for example: "EplanPxfRoot")</param>
        /// <param name="attributeName">Name of the attribute (for example: "SourceProject")</param>
        /// <param name="newValue">Guess what</param>
        private void ReplaceXmlAttributeValue(string xmlFileName, string nodeName, string attributeName, string newValue)
        {
            XmlDocument document = new XmlDocument();
            document.Load(xmlFileName);
            XmlNodeList nodeList = document.SelectNodes("//" + nodeName);
            
            foreach (XmlNode node in nodeList)
            {
                if (node.Attributes[attributeName] != null)
                {
                    node.Attributes[attributeName].Value = newValue;
                }
            }

            document.PreserveWhitespace = true; //TODO
            XmlTextWriter writer = new XmlTextWriter(xmlFileName, Encoding.UTF8);
            writer.Formatting = Formatting.Indented;
            document.WriteTo(writer);
            writer.Close();
        }        

        /// <summary>
        /// Called at loading this script. Userdecision adding menuitem.
        /// </summary>
        [DeclareRegister]
        public void OnRegister()
        {            
            Process oCurrent = Process.GetCurrentProcess();
            this.ww = new WindowWrapper(oCurrent.MainWindowHandle); //wrap the form to eplan process
            DialogResult result = MessageBox.Show(ww, "Do you want to add a menuitem to the \"Insert\"-menu for this action?", 
                "Action \"InsertMacroScaledToPageScale\" is loaded", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
            if (result == DialogResult.Yes)
            {
                this.AddMenueItem();
            }
        }

        /// <summary>
        /// Called at unloading this script. Removes menuitem if exists.
        /// </summary>
        [DeclareUnregister]
        public void OnUnRegister()
        {
            if (this.MenuId != null)
            {
                this.RemoveMenuItem();
            }
        }

        /// <summary>
        /// 37024 MenuId of insert/windowmacro
        /// </summary>
        private void AddMenueItem()
        {
            Eplan.EplApi.Gui.Menu menu = new Eplan.EplApi.Gui.Menu();
            this.MenuId = menu.AddMenuItem("Windowmacro with scaling...", 
                "InsertMacroScaledToPageScale", 
                "Windowmacro with scaling option", 
                37024, 1, false, false);
        }

        /// <summary>
        /// Removes MenuId wich was set from AddMenuItem().
        /// </summary>
        private void RemoveMenuItem()
        {
            if (this.MenuId != null)
            {
                Eplan.EplApi.Gui.Menu menu = new Eplan.EplApi.Gui.Menu();
                menu.RemoveMenuItem(this.MenuId);
            }
        }
    }
    
    /// <summary>
    /// Makes handling of Eplan.EplApi.Base.Decider more like an OpenFileDialog
    /// Also sets properties for selecting macros
    /// </summary>
    public class OpenMacroDialog
    {
        public String File { get; private set; }
        private Decider decider;
        private FileSelectDecisionContext fileSelectDecisionContext;

        public OpenMacroDialog()
        {
            decider = new Decider();
            fileSelectDecisionContext = new FileSelectDecisionContext("WindowMacroSelector", EnumDecisionReturn.eCANCEL);
            fileSelectDecisionContext.Title = "Makro auswählen";
            fileSelectDecisionContext.AllowMultiSelect = false;
            fileSelectDecisionContext.DefaultExtension = "ema";
            fileSelectDecisionContext.AddFilter("Fenstermakro (*.ema)", "*.ema");
            fileSelectDecisionContext.AddFilter("Alle Dateien (*.*)", "*.*");
            fileSelectDecisionContext.CustomDefaultPath = PathMap.SubstitutePath("$(MD_MACROS)");
            this.File = "";
        }

        public DialogResult Show() 
        {
            EnumDecisionReturn answer = decider.Decide(fileSelectDecisionContext);
            if (answer == EnumDecisionReturn.eOK)
            {
                this.File = fileSelectDecisionContext.GetFiles()[0];
                return DialogResult.OK;
            }
            return DialogResult.Cancel;            
        }
    }

    /// <summary>
    /// part 2 of form to select representationtype, variant and "to page scale"
    /// !!!CAUTION!!! There's no interlocking between variant selection and representationtype selection
    /// It is possible to select a non existing varinat or representationtype
    /// </summary>
    public partial class RepresentationTypeAndVariantSelector : Form
    {
        public RepresentationType Representationtype { get; private set; }
        public Variant Variant { get; private set; }
        public string ToPageScale { get; private set; }
        private string _macroFile;
        public RepresentationTypeAndVariantSelector(string macroFile)
        {
            InitializeComponent();
            this._macroFile = macroFile;
            
            
            foreach (RepresentationType r in Enum.GetValues(typeof(RepresentationType)))
            {
                if (MacroHasRepType(r))
                {
                    this.comboBoxRepType.Items.Add(r); 
                }
            }
            foreach (Variant v in Enum.GetValues(typeof(Variant)))
            {
                if (MacroHasVariant(v))
                {
                    this.comboBoxVariant.Items.Add(v);    
                }                

            }
            this.comboBoxRepType.SelectedIndex = 0;
            this.comboBoxVariant.SelectedIndex = 0;           
        }

        /// <summary>
        /// Checks if the macrofile includes the representationtype
        /// </summary>
        /// <param name="repType">Representationtype to check for</param>
        /// <returns></returns>
        public bool MacroHasRepType(RepresentationType repType)
        {
            XmlDocument document = new XmlDocument();
            document.Load(_macroFile);
            XmlNodeList nodeList = document.SelectNodes("//MacroVariant");
            foreach (XmlNode node in nodeList)
            {
                if (node.Attributes["MacroFuncType"].Value.Equals(Convert.ToInt16(repType).ToString()))
                {
                    return true;
                }
            }
            return false;
        }

        /// <summary>
        /// Checks if the macrofile includes the variant
        /// </summary>
        /// <param name="variant">Variant to check for</param>
        /// <returns></returns>
        public bool MacroHasVariant(Variant variant)
        {
            XmlDocument document = new XmlDocument();
            document.Load(_macroFile);
            XmlNodeList nodeList = document.SelectNodes("//MacroVariant");
            foreach (XmlNode node in nodeList)
            {
                if (node.Attributes["VariantId"].Value.Equals(Convert.ToInt16(variant).ToString()))
                {                    
                    return true;
                }
            }
            return false;
        }

        /// <summary>
        /// Called by the bottonOk.Click event
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void buttonOk_Click(object sender, EventArgs e)
        {
            this.Representationtype = (RepresentationType)comboBoxRepType.SelectedItem;
            this.Variant = (Variant)comboBoxVariant.SelectedItem;
            this.ToPageScale = checkBoxPageScale.Checked.ToString().ToLower();
        }

    }

    /// <summary>
    /// macro representationtypes enumerators (use without API)
    /// </summary>
    public enum RepresentationType
    {
        MultiLine = 1,
        SingleLine = 2,
        PairCrossReference = 3,
        Overview = 4,
        Graphics = 5,
        ArticlePlacement = 6,
        PI_FlowChart = 7,
        Fluid_MultiLine = 8,
        Cabling = 9,
        ArticlePlacement3D = 10,
        Functional = 11
    }

    /// <summary>
    /// macro variant enumerators
    /// </summary>
    public enum Variant
    {
        Variant_A = 0,
        Variant_B = 1,
        Variant_C = 2,
        Variant_D = 3,
        Variant_E = 4,
        Variant_F = 5,
        Variant_G = 6,
        Variant_H = 7,
        Variant_I = 8,
        Variant_J = 9,
        Variant_K = 10,
        Variant_L = 11,
        Variant_M = 12,
        Variant_N = 13,
        Variant_O = 14,
        Variant_P = 15
    }

    /// <summary>
    /// For handling the owner of a form. Copied from Eplan API "User Guide" example
    /// </summary>
    public class WindowWrapper : System.Windows.Forms.IWin32Window
    {
        public WindowWrapper(IntPtr handle)
        {
            _hwnd = handle;
        }

        public IntPtr Handle
        {
            get { return _hwnd; }
        }
        private IntPtr _hwnd;
    }
}
